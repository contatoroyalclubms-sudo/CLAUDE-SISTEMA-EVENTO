import { MemorySystem } from '../core/memory-system';
export interface BackendTask {
    id: string;
    type: 'api_design' | 'database_modeling' | 'microservice' | 'integration' | 'performance' | 'security';
    description: string;
    techStack: string[];
    requirements: any;
    projectContext: string;
}
export declare class BackendDevAgent {
    private memorySystem;
    private readonly logger;
    private readonly agentId;
    private mcpTools;
    constructor(memorySystem: MemorySystem);
    executeTask(task: BackendTask): Promise<any>;
    private designAPI;
    private designDatabase;
    private createMicroservice;
    private createIntegration;
    private optimizePerformance;
    private implementSecurity;
    private generateAPIRoutes;
    private generateControllers;
    private generateServices;
    private generateMiddleware;
    private generateDatabaseTables;
    private generateOptimalIndexes;
    private defineForeignKeys;
    private generateConstraints;
    private generateMigrations;
    private suggestPerformanceOptimizations;
    private defineBackupStrategy;
    private generateMicroserviceStructure;
    private resolveDependencies;
    private generateDomainModels;
    private generateRepositories;
    private generateBusinessServices;
    private generateAPIControllers;
    private generateDockerfile;
    private generateKubernetesManifests;
    private generateCICDPipeline;
    private determineIntegrationType;
    private selectOptimalProtocol;
    private designAuthentication;
    private generateAPIClients;
    private generateDataAdapters;
    private implementErrorHandling;
    private implementRetryMechanism;
    private generateHealthChecks;
    private defineMetrics;
    private implementLogging;
    private implementCachingLayers;
    private optimizeQueries;
    private optimizeIndexes;
    private configureConnectionPool;
    private implementHorizontalScaling;
    private configureLoadBalancer;
    private configureAutoScaling;
    private implementJWTAuth;
    private implementRBAC;
    private implementEncryption;
    private implementInputValidation;
    private implementDataSanitization;
    private implementGDPRCompliance;
    private implementSecurityHeaders;
    private implementAuditLogging;
    getAgentStatus(): Promise<any>;
}
